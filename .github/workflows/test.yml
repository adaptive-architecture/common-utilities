name: Build and test.
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: "tests"
  cancel-in-progress: false

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '17'
          java-package: 'jre'

      - uses: actions/checkout@v5
        with:
          fetch-depth: 0 # In order for Sonar Scan to have all data.

      - name: Setup dotnet
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: 9.x

      - uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget

      - name: Install dependencies
        run: |
          dotnet restore

      - name: Install tools
        run: |
          dotnet tool install --global dotnet-sonarscanner

      - name: SonarQube Begin
        run: >-
          dotnet sonarscanner begin /k:"adaptive-architecture_common-utilities"
          /o:"adaptive-architecture"
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          /d:sonar.host.url="https://sonarcloud.io"
          /d:sonar.cs.opencover.reportsPaths=./coverage/coverage.opencover.xml
          /d:sonar.scanner.scanAll=false
          /d:sonar.exclusions="**/assets/**/*,**/coverage/**/*,**/docfx/**/*,**/samples/**/*,**/bin/**/*,**/obj/**/*"
          /d:sonar.scanner.skipJreProvisioning=true

      - name: Build
        run: dotnet build --no-incremental

      - name: Run Unit Tests
        run: sh ./pipeline/unit-test.sh

      - name: SonarQube End
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch SonarQube Issues via API
        if: always()
        run: |
          echo "=== Fetching SonarQube Issues via API ==="

          PROJECT_KEY="adaptive-architecture_common-utilities"
          SONAR_HOST="https://sonarcloud.io"

          # Wait a moment for SonarQube to process the analysis
          echo "Waiting 30 seconds for SonarQube to process the analysis..."
          sleep 30

          # Get project status
          echo "=== Project Status ==="
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "${SONAR_HOST}/api/qualitygates/project_status?projectKey=${PROJECT_KEY}" \
            | jq '.' || echo "Failed to get project status"

          echo ""
          echo "=== Current Issues ==="
          # Get all current issues for the project
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "${SONAR_HOST}/api/issues/search?componentKeys=${PROJECT_KEY}&resolved=false&s=FILE_LINE&asc=true&ps=100" \
            | jq -r '.issues[] | "File: \(.component // "unknown") Line: \(.line // "N/A") Rule: \(.rule) Severity: \(.severity) Message: \(.message)"' \
            || echo "Failed to fetch issues"

          echo ""
          echo "=== Issues Summary by Severity ==="
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "${SONAR_HOST}/api/issues/search?componentKeys=${PROJECT_KEY}&resolved=false&facets=severities,types,rules&ps=1" \
            | jq -r '.facets[] | select(.property == "severities") | .values[] | "\(.val): \(.count) issues"' \
            || echo "Failed to get severity summary"

          echo ""
          echo "=== Issues by Rule ==="
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "${SONAR_HOST}/api/issues/search?componentKeys=${PROJECT_KEY}&resolved=false&facets=rules&ps=1" \
            | jq -r '.facets[] | select(.property == "rules") | .values[] | "\(.val): \(.count) issues"' \
            || echo "Failed to get rules summary"

      - name: Display Pull Request Issues (if PR)
        if: always() && github.event_name == 'pull_request'
        run: |
          echo "=== Pull Request Specific Issues ==="

          PROJECT_KEY="adaptive-architecture_common-utilities"
          SONAR_HOST="https://sonarcloud.io"
          PR_KEY="${{ github.event.pull_request.number }}"

          # Get issues for the specific pull request
          echo "Fetching issues for Pull Request #${PR_KEY}..."
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "${SONAR_HOST}/api/issues/search?componentKeys=${PROJECT_KEY}&pullRequest=${PR_KEY}&resolved=false&s=FILE_LINE&asc=true&ps=100" \
            | jq -r '.issues[] | "File: \(.component // "unknown") Line: \(.line // "N/A") Rule: \(.rule) Severity: \(.severity) Message: \(.message)"' \
            || echo "Failed to fetch PR-specific issues or no PR-specific issues found"

      - name: Display Detailed Issues with Rule Descriptions
        if: always()
        run: |
          echo "=== Detailed Issues with Descriptions ==="

          PROJECT_KEY="adaptive-architecture_common-utilities"
          SONAR_HOST="https://sonarcloud.io"

          # Get issues with rule keys, then fetch rule descriptions
          echo "Fetching detailed issue information..."

          # First get the issues and extract unique rule keys
          ISSUES_JSON=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "${SONAR_HOST}/api/issues/search?componentKeys=${PROJECT_KEY}&resolved=false&s=FILE_LINE&asc=true&ps=100")

          if echo "$ISSUES_JSON" | jq -e '.issues' > /dev/null 2>&1; then
            echo "$ISSUES_JSON" | jq -r '.issues[] |
            "
            ================================================================================
            File: \(.component | sub(".*:"; "") // "unknown")
            Line: \(.line // "N/A")
            Rule: \(.rule)
            Severity: \(.severity)
            Type: \(.type)
            Message: \(.message)
            Rule URL: https://sonarcloud.io/organizations/adaptive-architecture/rules?rule_key=\(.rule | @uri)
            ================================================================================"'
          else
            echo "No issues found or failed to parse JSON response"
            echo "Raw response: $ISSUES_JSON"
          fi

      # - uses: coverallsapp/github-action@master
      #   with:
      #     github-token: "${{ secrets.GITHUB_TOKEN }}"
      #     path-to-lcov: "./coverage/coverage.info"
