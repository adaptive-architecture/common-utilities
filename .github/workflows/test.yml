name: Build and test.
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      redis-service:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # In order for Sonar Scan to have all data.

      - name: Setup dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget

      - id: branch_name
        name: Get branch name
        run: |
          echo "SOURCE_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
          echo "SOURCE_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "SOURCE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "SOURCE_TAG_TRIMMED=$(echo ${GITHUB_REF#refs/tags/} | sed 's/v//')" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: |
          dotnet restore
          echo ${{steps.branch_name.outputs.SOURCE_NAME}}
          echo ${{steps.branch_name.outputs.SOURCE_BRANCH}}
          echo ${{steps.branch_name.outputs.SOURCE_TAG}}
          echo ${{steps.branch_name.outputs.SOURCE_TAG_TRIMMED}}

      - name: Install tools
        run: |
          dotnet tool install --global dotnet-sonarscanner

      - name: SonarQube Begin
        run: |
          dotnet sonarscanner /k:"adaptive-architecture_common-utilities" /o:"adaptive-architecture" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths=./coverage/coverage.opencover.xml

      - name: Build
        run: dotnet build --no-incremental

      - name: Run Unit Tests
        run: sh ./pipeline/unit-test.sh

      - name: SonarQube End
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: coverallsapp/github-action@master
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          path-to-lcov: "./coverage/coverage.info"
