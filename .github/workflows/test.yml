name: Build and test.
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: "tests"
  cancel-in-progress: false

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '17'
          java-package: 'jre'

      - uses: actions/checkout@v5
        with:
          fetch-depth: 0 # In order for Sonar Scan to have all data.

      - name: Setup dotnet
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: 9.x

      - uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget

      - name: Install dependencies
        run: |
          dotnet restore

      - name: Install tools
        run: |
          dotnet tool install --global dotnet-sonarscanner

      - name: SonarQube Begin
        run: >-
          dotnet sonarscanner begin /k:"adaptive-architecture_common-utilities"
          /o:"adaptive-architecture"
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          /d:sonar.host.url="https://sonarcloud.io"
          /d:sonar.cs.opencover.reportsPaths=./coverage/coverage.opencover.xml
          /d:sonar.scanner.scanAll=false
          /d:sonar.exclusions="**/assets/**/*,**/coverage/**/*,**/docfx/**/*,**/samples/**/*,**/bin/**/*,**/obj/**/*"
          /d:sonar.scanner.skipJreProvisioning=true
          /d:sonar.verbose=true
          /d:sonar.log.level=DEBUG
          /d:sonar.qualitygate.wait=true

      - name: Build
        run: dotnet build --no-incremental

      - name: Run Unit Tests
        run: sh ./pipeline/unit-test.sh

      - name: SonarQube End
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Display SonarQube Configuration
        if: always()
        run: |
          echo "=== SonarQube Configuration ==="
          if [ -f .sonarqube/conf/SonarQube.Analysis.xml ]; then
            echo "Found SonarQube.Analysis.xml:"
            cat .sonarqube/conf/SonarQube.Analysis.xml
          else
            echo "No SonarQube.Analysis.xml found"
          fi

          echo ""
          echo "=== SonarQube Directory Structure ==="
          find .sonarqube -type f | head -20 | while read file; do
            echo "$file"
          done

      - name: Display SonarQube Output Files
        if: always()
        run: |
          echo "=== Listing SonarQube output directory ==="
          ls -la .sonarqube/out/ || echo "No .sonarqube/out/ directory found"

          echo ""
          echo "=== SonarQube Issues Report ==="
          if [ -f .sonarqube/out/sonar-report.json ]; then
            cat .sonarqube/out/sonar-report.json
          elif [ -f .sonarqube/out/issues-report/issues-report.json ]; then
            cat .sonarqube/out/issues-report/issues-report.json
          else
            echo "No issues report found"
          fi

          echo ""
          echo "=== All files in SonarQube output ==="
          find .sonarqube -name "*.json" -o -name "*.xml" -o -name "*.txt" -o -name "*.log" | head -20 | while read file; do
            echo "=== Content of $file ==="
            cat "$file" 2>/dev/null || echo "Could not read $file"
            echo ""
          done

      - name: Display SonarQube Analysis Results
        if: always()
        run: |
          echo "=== Searching for SonarQube logs and reports ==="
          find . -path "./coverage" -prune -o -path "./.git" -prune -o -name "*sonar*" -type f -print | head -30 | while read file; do
            echo "Found file: $file"
            if [[ "$file" == *.json ]] || [[ "$file" == *.xml ]] || [[ "$file" == *.txt ]] || [[ "$file" == *.log ]]; then
              echo "=== Content of $file ==="
              head -100 "$file" 2>/dev/null || echo "Could not read $file"
              echo ""
            fi
          done

      - name: Parse and Display SonarQube Issues
        if: always()
        run: |
          echo "=== Searching for SonarQube Issues in Console Output ==="
          echo "Looking for issue patterns in the workflow log above..."

          echo ""
          echo "=== MSBuild Warning/Error Summary ==="
          # Look for any warning or error files that might have been created
          find . -name "*.sarif" -o -name "*warnings*" -o -name "*errors*" | while read file; do
            echo "Found analysis file: $file"
            cat "$file" 2>/dev/null || echo "Could not read $file"
          done

          echo ""
          echo "=== SonarQube Scanner Logs ==="
          find . -name "sonar-scanner*.log" | while read logfile; do
            echo "=== Content of $logfile ==="
            grep -i "warning\|error\|issue\|rule" "$logfile" 2>/dev/null || echo "No issues found in $logfile"
          done

      # - uses: coverallsapp/github-action@master
      #   with:
      #     github-token: "${{ secrets.GITHUB_TOKEN }}"
      #     path-to-lcov: "./coverage/coverage.info"
