name: Sonar Scan
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Sonar Scan Build
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      redis-service:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Setup dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          New-Item -Path ./.sonar/scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Cache Coverlet
        id: cache-coverlet-console
        uses: actions/cache@v3
        with:
          path: ./.coverlet/coverlet-console
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install Coverlet
        if: steps.cache-coverlet-console.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          dotnet tool install coverlet.console --tool-path ./.coverlet/coverlet-console



      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"adaptive-architecture_common-utilities" /o:"adaptive-architecture" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths=coverage.xml
          dotnet build --no-incremental

          ./.coverlet/coverlet-console/coverlet ./Common.Utilities.UnitTests/bin/Debug/net6.0/Common.Utilities.UnitTests.dll
            --target "dotnet"
            --targetargs "test --no-build"
            --format "json,opencover"
            --output "coverage.xml"
            --merge-with "coverage.json"

          ./.coverlet/coverlet-console/coverlet ./Common.Utilities.Redis.UnitTests/bin/Debug/net6.0/Common.Utilities.Redis.UnitTests.dll
            --target "dotnet"
            --targetargs "test --no-build"
            --format "json,opencover"
            --output "coverage.xml"
            --merge-with "coverage.json"

          ./.coverlet/coverlet-console/coverlet ./Common.Utilities.Redis.IntegrationTests/bin/Debug/net6.0/Common.Utilities.Redis.IntegrationTests.dll
            --target "dotnet"
            --targetargs "test --no-build"
            --format "json,opencover"
            --output "coverage.xml"
            --merge-with "coverage.json"

          ./.coverlet/coverlet-console/coverlet ./Common.Utilities.Configuration.UnitTests/bin/Debug/net6.0/Common.Utilities.Configuration.UnitTests.dll
            --target "dotnet"
            --targetargs "test --no-build"
            --format "json,opencover"
            --output "coverage.xml"
            --merge-with "coverage.json"

          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
