name: Sonar Scan
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Sonar Scan Build
    runs-on: windows-latest
    services:
      # Label used to access the service container
      redis-service:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379

    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Install Coverlet
        shell: powershell
        run: |
          dotnet tool install --global coverlet.console
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"adaptive-architecture_common-utilities" /o:"adaptive-architecture" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths=coverage.xml
          dotnet build --no-incremental

          coverlet .\Common.Utilities.UnitTests\bin\Debug\net6.0\Common.Utilities.UnitTests.dll
            --target "dotnet"
            --targetargs "test --no-build"
            --format "json,opencover"
            --output "coverage.xml"
            --merge-with "coverage.json"

          coverlet .\Common.Utilities.Redis.UnitTests\bin\Debug\net6.0\Common.Utilities.Redis.UnitTests.dll
            --target "dotnet"
            --targetargs "test --no-build"
            --format "json,opencover"
            --output "coverage.xml"
            --merge-with "coverage.json"

          coverlet .\Common.Utilities.Redis.IntegrationTests\bin\Debug\net6.0\Common.Utilities.Redis.IntegrationTests.dll
            --target "dotnet"
            --targetargs "test --no-build"
            --format "json,opencover"
            --output "coverage.xml"
            --merge-with "coverage.json"

          coverlet .\Common.Utilities.Configuration.UnitTests\bin\Debug\net6.0\Common.Utilities.Configuration.UnitTests.dll
            --target "dotnet"
            --targetargs "test --no-build"
            --format "json,opencover"
            --output "coverage.xml"
            --merge-with "coverage.json"

          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
